/*
 * TalesAPI
 *
 * This is the API of an app for learning English for Russian speakers
 *
 * OpenAPI spec version: 0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ArrayOfCharactersInner : IEquatable<ArrayOfCharactersInner>
    { 
        /// <summary>
        /// Character unique identifier
        /// </summary>
        /// <value>Character unique identifier</value>
        [DataMember(Name="CharacterId")]
        public string CharacterId { get; set; }

        /// <summary>
        /// Gets or Sets CharacterName
        /// </summary>
        [DataMember(Name="CharacterName")]
        public string CharacterName { get; set; }

        /// <summary>
        /// Avatart that appears in the story
        /// </summary>
        /// <value>Avatart that appears in the story</value>
        [DataMember(Name="CharacterAvatar")]
        public string CharacterAvatar { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ArrayOfCharactersInner {\n");
            sb.Append("  CharacterId: ").Append(CharacterId).Append("\n");
            sb.Append("  CharacterName: ").Append(CharacterName).Append("\n");
            sb.Append("  CharacterAvatar: ").Append(CharacterAvatar).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ArrayOfCharactersInner)obj);
        }

        /// <summary>
        /// Returns true if ArrayOfCharactersInner instances are equal
        /// </summary>
        /// <param name="other">Instance of ArrayOfCharactersInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ArrayOfCharactersInner other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CharacterId == other.CharacterId ||
                    CharacterId != null &&
                    CharacterId.Equals(other.CharacterId)
                ) && 
                (
                    CharacterName == other.CharacterName ||
                    CharacterName != null &&
                    CharacterName.Equals(other.CharacterName)
                ) && 
                (
                    CharacterAvatar == other.CharacterAvatar ||
                    CharacterAvatar != null &&
                    CharacterAvatar.Equals(other.CharacterAvatar)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CharacterId != null)
                    hashCode = hashCode * 59 + CharacterId.GetHashCode();
                    if (CharacterName != null)
                    hashCode = hashCode * 59 + CharacterName.GetHashCode();
                    if (CharacterAvatar != null)
                    hashCode = hashCode * 59 + CharacterAvatar.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ArrayOfCharactersInner left, ArrayOfCharactersInner right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ArrayOfCharactersInner left, ArrayOfCharactersInner right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
