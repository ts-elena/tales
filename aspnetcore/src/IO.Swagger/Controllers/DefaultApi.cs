/*
 * TalesAPI
 *
 * This is the API of an app for learning English for Russian speakers
 *
 * OpenAPI spec version: 0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DefaultApiController : ControllerBase
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Delete characters</remarks>
        /// <param name="body"></param>
        /// <response code="200">OK</response>
        [HttpDelete]
        [Route("/api/Character")]
        [ValidateModelState]
        [SwaggerOperation("ApiCharacterDelete")]
        [SwaggerResponse(statusCode: 200, type: typeof(ArrayOfCharacters), description: "OK")]
        public virtual IActionResult ApiCharacterDelete([FromBody]List<string> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ArrayOfCharacters));
            string exampleJson = null;
            exampleJson = "[ {\n  \"CharacterId\" : \"CharacterId\",\n  \"CharacterName\" : \"CharacterName\",\n  \"CharacterAvatar\" : \"CharacterAvatar\"\n}, {\n  \"CharacterId\" : \"CharacterId\",\n  \"CharacterName\" : \"CharacterName\",\n  \"CharacterAvatar\" : \"CharacterAvatar\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ArrayOfCharacters>(exampleJson)
                        : default(ArrayOfCharacters);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Get Character by ID</remarks>
        /// <param name="id">An ID to look up one or more values</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/api/Character/{id}")]
        [ValidateModelState]
        [SwaggerOperation("ApiCharacterIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(string), description: "OK")]
        public virtual IActionResult ApiCharacterIdGet([FromRoute][Required]string id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(string));
            string exampleJson = null;
            exampleJson = "\"\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<string>(exampleJson)
                        : default(string);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Add new Characters</remarks>
        /// <param name="body"></param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Access Denied</response>
        /// <response code="404">The resource is not found</response>
        [HttpPost]
        [Route("/api/Character")]
        [ValidateModelState]
        [SwaggerOperation("ApiCharacterPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(ArrayOfCharacters), description: "OK")]
        public virtual IActionResult ApiCharacterPost([FromBody]List<ArrayOfCharactersInner> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ArrayOfCharacters));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"CharacterId\" : \"CharacterId\",\n  \"CharacterName\" : \"CharacterName\",\n  \"CharacterAvatar\" : \"CharacterAvatar\"\n}, {\n  \"CharacterId\" : \"CharacterId\",\n  \"CharacterName\" : \"CharacterName\",\n  \"CharacterAvatar\" : \"CharacterAvatar\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ArrayOfCharacters>(exampleJson)
                        : default(ArrayOfCharacters);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Edit existing characters</remarks>
        /// <param name="body"></param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Access Denied</response>
        /// <response code="404">The resource is not found</response>
        [HttpPut]
        [Route("/api/Character")]
        [ValidateModelState]
        [SwaggerOperation("ApiCharacterPut")]
        [SwaggerResponse(statusCode: 200, type: typeof(ArrayOfCharacters), description: "OK")]
        public virtual IActionResult ApiCharacterPut([FromBody]List<ArrayOfCharactersInner> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ArrayOfCharacters));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"CharacterId\" : \"CharacterId\",\n  \"CharacterName\" : \"CharacterName\",\n  \"CharacterAvatar\" : \"CharacterAvatar\"\n}, {\n  \"CharacterId\" : \"CharacterId\",\n  \"CharacterName\" : \"CharacterName\",\n  \"CharacterAvatar\" : \"CharacterAvatar\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ArrayOfCharacters>(exampleJson)
                        : default(ArrayOfCharacters);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
