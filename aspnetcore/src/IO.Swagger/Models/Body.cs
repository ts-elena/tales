/*
 * TalesAPI
 *
 * This is the API of an app for learning English for Russian speakers
 *
 * OpenAPI spec version: 0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Body : IEquatable<Body>
    { 
        /// <summary>
        /// Gets or Sets StoryName
        /// </summary>
        [DataMember(Name="StoryName")]
        public string StoryName { get; set; }

        /// <summary>
        /// Gets or Sets StoryCoverImage
        /// </summary>
        [DataMember(Name="StoryCoverImage")]
        public string StoryCoverImage { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name="IsActive")]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Gets or Sets StoryId
        /// </summary>
        [DataMember(Name="StoryId")]
        public string StoryId { get; set; }

        /// <summary>
        /// Gets or Sets StorySetId
        /// </summary>
        [DataMember(Name="StorySetId")]
        public string StorySetId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Body {\n");
            sb.Append("  StoryName: ").Append(StoryName).Append("\n");
            sb.Append("  StoryCoverImage: ").Append(StoryCoverImage).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  StoryId: ").Append(StoryId).Append("\n");
            sb.Append("  StorySetId: ").Append(StorySetId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Body)obj);
        }

        /// <summary>
        /// Returns true if Body instances are equal
        /// </summary>
        /// <param name="other">Instance of Body to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Body other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    StoryName == other.StoryName ||
                    StoryName != null &&
                    StoryName.Equals(other.StoryName)
                ) && 
                (
                    StoryCoverImage == other.StoryCoverImage ||
                    StoryCoverImage != null &&
                    StoryCoverImage.Equals(other.StoryCoverImage)
                ) && 
                (
                    IsActive == other.IsActive ||
                    IsActive != null &&
                    IsActive.Equals(other.IsActive)
                ) && 
                (
                    StoryId == other.StoryId ||
                    StoryId != null &&
                    StoryId.Equals(other.StoryId)
                ) && 
                (
                    StorySetId == other.StorySetId ||
                    StorySetId != null &&
                    StorySetId.Equals(other.StorySetId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (StoryName != null)
                    hashCode = hashCode * 59 + StoryName.GetHashCode();
                    if (StoryCoverImage != null)
                    hashCode = hashCode * 59 + StoryCoverImage.GetHashCode();
                    if (IsActive != null)
                    hashCode = hashCode * 59 + IsActive.GetHashCode();
                    if (StoryId != null)
                    hashCode = hashCode * 59 + StoryId.GetHashCode();
                    if (StorySetId != null)
                    hashCode = hashCode * 59 + StorySetId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Body left, Body right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Body left, Body right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
